//! This module contains code that runs query plans generated by
//! [`crate::query::planner`].
//!
//! It's called "vm" mainly because this DB is mostly inspired by SQLite 2 and
//! SQLite 2 has an actual [virtual machine](https://www.sqlite.org/vdbe.html)
//! that runs bytecode. However, the query execution part is inspired by
//! Postgres and MySQL, which don't generate bytecode but instead generate a
//! plan tree and execute that. Postgres does use JIT to make it more efficient
//! and I'm pretty sure MySQL does something too but I didn't bother to find
//! exactly what. Anyway, here are some references:
//!
//! - [MySQL iterators](https://github.com/mysql/mysql-server/blob/trunk/sql/iterators/basic_row_iterators.cc)
//! - [MySQL planner](https://github.com/mysql/mysql-server/blob/trunk/sql/sql_planner.cc)
//! - [Postgres planner](https://github.com/postgres/postgres/blob/master/src/backend/optimizer/plan/createplan.c)
//! - [Postgres JIT module](https://github.com/postgres/postgres/tree/master/src/backend/jit)

mod expression;

pub(crate) mod plan;
pub(crate) mod statement;

pub(crate) use expression::{
    eval_where, resolve_expression, resolve_literal_expression, TypeError, VmDataType, VmError,
};
